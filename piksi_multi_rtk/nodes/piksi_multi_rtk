#!/usr/bin/python3

import rospy

from math import radians
from sbp.client.drivers.network_drivers import TCPDriver
from sbp.client import Handler, Framer
from sbp.imu import SBP_MSG_IMU_RAW
from sbp.mag import SBP_MSG_MAG_RAW
from sbp.navigation import SBP_MSG_POS_LLH

from sensor_msgs.msg import NavSatFix, NavSatStatus, Imu, MagneticField


def main():
    # Initialize ROS node
    rospy.init_node('piski_multi_rtk', anonymous=True)

    # Inspired by
    # https://www.bosch-sensortec.com/products/motion-sensors/imus/bmi160/
    default_imu_acc_cov = [0.0] * 9
    default_imu_acc_cov[::4] = [(50e-3 * 9.82)**2] * 3
    default_imu_gyro_cov = [0.0] * 9
    default_imu_gyro_cov[::4] = [radians(3)**2] * 3

    # For default settings see https://www.swiftnav.com/resource-files/
    # Piksi%20Multi/v2.4.15/Manual/PiksiMulti-settings-v2.4.15.pdf
    tcp_addr = rospy.get_param('~tcp_addr', '192.168.0.222')
    tcp_port = rospy.get_param('~tcp_port', 55555)
    # For default settings see https://www.swiftnav.com/resource-files/
    # Piksi%20Multi/v2.4.15/Manual/PiksiMulti-settings-v2.4.15.pdf
    # and https://www.bosch-sensortec.com/products/motion-sensors/imus/bmi160/
    imu_acc_sens = rospy.get_param('~imu_acc_sens', 9.82 / 4096.0)
    imu_acc_cov = rospy.get_param('~imu_acc_cov', default_imu_acc_cov)
    imu_gyro_sens = rospy.get_param('~imu_gyro_sens', radians(1) / 262.4)
    imu_gyro_offset = rospy.get_param('~imu_gyro_offset', [0.0] * 3)
    imu_gyro_cov = rospy.get_param('~imu_gyro_cov', default_imu_gyro_cov)
    imu_frame = rospy.get_param('~imu_frame', 'piksi_imu')
    mag_sens = rospy.get_param('~mag_sens', 1e-6)
    mag_offset = rospy.get_param('~mag_offset', [0.0] * 3)
    mag_frame = rospy.get_param('~mag_frame', imu_frame)
    gnss_frame = rospy.get_param('~gnss_frame', 'piksi_gnss')

    # Initialize publishers
    pub_imu = rospy.Publisher('imu/raw', Imu, queue_size=1)
    pub_mag = rospy.Publisher('mag/raw', MagneticField, queue_size=1)
    pub_fix = rospy.Publisher('gnss/fix', NavSatFix, queue_size=1)

    # Initialize imu message to be published
    imu = Imu()
    imu.header.frame_id = imu_frame
    # Means no data http://docs.ros.org/en/api/sensor_msgs/html/msg/Imu.html
    imu.orientation_covariance = [-1.0] + [0.0] * 8
    imu.angular_velocity_covariance = imu_gyro_cov
    imu.linear_acceleration_covariance = imu_acc_cov

    # Initialize MagneticField message to be published
    mag = MagneticField()
    mag.header.frame_id = mag_frame
    # Inspired by https://www.bosch-sensortec.com/products/motion-sensors/
    # magnetometers-bmm150/
    mag.magnetic_field_covariance = [0.0] * 9
    mag.magnetic_field_covariance[::4] = [(40e-6)**2] * 3

    # Initialize NavSatFix message to be published
    fix = NavSatFix()
    fix.header.frame_id = gnss_frame

    def publish_imu_msg(msg, **metadata):
        imu.header.stamp = rospy.Time.now()
        imu.angular_velocity.x = msg.gyr_x * imu_gyro_sens + imu_gyro_offset[0]
        imu.angular_velocity.y = msg.gyr_y * imu_gyro_sens + imu_gyro_offset[1]
        imu.angular_velocity.z = msg.gyr_z * imu_gyro_sens + imu_gyro_offset[2]
        imu.linear_acceleration.x = msg.acc_x * imu_acc_sens
        imu.linear_acceleration.y = msg.acc_y * imu_acc_sens
        imu.linear_acceleration.z = msg.acc_z * imu_acc_sens
        pub_imu.publish(imu)

    def publish_mag_msg(msg, **metadata):
        mag.header.stamp = rospy.Time.now()
        mag.magnetic_field.x = msg.mag_x * mag_sens + mag_offset[0]
        mag.magnetic_field.y = msg.mag_y * mag_sens + mag_offset[1]
        mag.magnetic_field.z = msg.mag_z * mag_sens + mag_offset[2]
        pub_mag.publish(mag)

    def publish_llh_msg(msg, **metadata):
        if msg.n_sats == 0:
            return

        # Lower 3 bits define fix mode.
        fix_mode = msg.flags & 0b111

        if fix_mode == 0:    # Invalid
            navsat_status = NavSatStatus.STATUS_NO_FIX
        elif fix_mode == 1:  # Single Point Position (SPP)
            navsat_status = NavSatStatus.STATUS_FIX
        elif fix_mode == 2:  # Differential GNSS (DGNSS)
            navsat_status = NavSatStatus.STATUS_NO_FIX
        elif fix_mode == 3:  # Float RTK
            navsat_status = NavSatStatus.STATUS_GBAS_FIX
        elif fix_mode == 4:  # Fixed RTK
            navsat_status = NavSatStatus.STATUS_GBAS_FIX
        elif fix_mode == 5:  # Dead Reckoning
            navsat_status = NavSatStatus.STATUS_NO_FIX
        elif fix_mode == 6:  # SBAS Position
            navsat_status = NavSatStatus.STATUS_SBAS_FIX
        else:                # Undefined
            navsat_status = NavSatStatus.STATUS_NO_FIX

        # Convert standard deviation in mm to variance in m^2
        h_var = (msg.h_accuracy * 1e-3) ** 2
        v_var = (msg.v_accuracy * 1e-3) ** 2

        fix.position_covariance_type = NavSatFix.COVARIANCE_TYPE_APPROXIMATED
        fix.latitude = msg.lat
        fix.longitude = msg.lon
        fix.altitude = msg.height
        fix.status.status = navsat_status
        fix.position_covariance = [h_var, 0.0,   0.0,
                                   0.0,   h_var, 0.0,
                                   0.0,   0.0,   v_var]
        pub_fix.publish(fix)

    # While we are still supposed to run, try reconnecting to the piksi board
    # every time we disconnect or can't establish a connection in the first
    # place
    while not rospy.is_shutdown():
        try:
            # Listen for magnetometer, IMU and GNSS messages reported over TCP
            # using SBP (Swift Binary Protocol)
            with TCPDriver(tcp_addr, tcp_port) as driver:
                framer = Framer(driver.read, driver.write)
                with Handler(framer, autostart=False) as src:
                    src.add_callback(publish_imu_msg, SBP_MSG_IMU_RAW)
                    src.add_callback(publish_mag_msg, SBP_MSG_MAG_RAW)
                    src.add_callback(publish_llh_msg, SBP_MSG_POS_LLH)

                    # Only start processing messages after callbacks have been
                    # added
                    src.start()

                    # Wait for shutdown
                    try:
                        rospy.spin()
                    except rospy.ROSInterruptException:
                        src.stop()
        except ConnectionError as e:
            # Wait a while before trying to connect again
            t = 1
            rospy.logwarn(f'Unable to connect to {tcp_addr}:{tcp_port}, '
                          f'retrying in {t} second')
            rospy.sleep(t)


if __name__ == '__main__':
    main()
