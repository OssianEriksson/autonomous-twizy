#!/usr/bin/python3

import argparse
import yaml
from pathlib import Path

from math import atan2, sqrt, pi

parser = argparse.ArgumentParser(
    description='Produces Twizy model in proto format for use with webots.')

parser.add_argument('--translation',
                    type=str,
                    default='0.0 0.0 0.0',
                    help='default position of model')
parser.add_argument('--rotation',
                    type=str,
                    default='0.0 1.0 0.0 0.0',
                    help='default rotation of model')
parser.add_argument('--controller',
                    type=str,
                    default='ros',
                    help='default controller')
parser.add_argument('--controller-args',
                    type=str,
                    nargs='+',
                    default=[],
                    action='extend',
                    help='default arguments for controller')

args = parser.parse_args()

description_pkg_path = Path(__file__).parent.parent

with open(description_pkg_path / 'config' / 'physical.yaml', 'r') as f:
    physical = yaml.safe_load(f)


def dict2str(a, *indices):
    return ' '.join(str(a[i]) for i in indices)


def vec2str(a):
    return dict2str(a, 'x', 'y', 'z')


def array2str(a, indent=0, tostr=str):
    if len(a) == 0:
        return '[ ]'
    elems = '\n'.join([f'{"  " * (indent + 1) + tostr(b)}' for b in a])
    return f'[\n{elems}\n{"  " * indent}]'


robot_mass = physical['chassis_mass'] / 2.0

mesh_path = description_pkg_path / 'meshes'
texture_path = mesh_path / 'textures'

print(f"""#VRML_SIM R2021a utf8

# =============================================================================
# | This document was autogenerated by python from                            |
# | {'{:<74}'.format(__file__)}|
# | EDITING THIS FILE BY HAND IS NOT RECOMMENDED                              |
# =============================================================================

PROTO Twizy [
  field SFVec3f    translation {args.translation}
  field SFRotation rotation    {args.rotation}
  field SFString   controller  "{args.controller}"
  field MFString controllerArgs {array2str(args.controller_args, 1, lambda x: f'"{x}"')}
]
{{
  Robot {{
    children [
      Solid {{
        children [
          Transform {{
            children [
              Shape {{
                geometry Mesh {{
                  url [
                    "{(mesh_path / 'chassis.dae')}"
                  ]
                }}
                appearance Appearance {{
                  texture ImageTexture {{
                    url [
                      "{(texture_path / 'chassis.jpg')}"
                    ]
                  }}
                  textureTransform DEF BLENDER_TEX_TF TextureTransform {{
                    scale 1.0 -1.0
                  }}
                  material Material {{ }}
                }}
              }}
            ]
            rotation 0.0 {1.0 / sqrt(2)} {1.0 / sqrt(2)} {pi}
            scale    {physical['chassis_length']} {physical['chassis_height']} {physical['chassis_width']}
          }}
          Transform {{
            children [
              Hinge2Joint {{
                endPoint Solid {{
                  children [
                    Transform {{
                      children [
                        Shape {{
                          geometry DEF WHEEL_MESH Mesh {{
                            url [
                              "{(mesh_path / 'wheel.dae')}"
                            ]
                          }}
                          appearance DEF WHEEL_APPEARANCE Appearance {{
                            texture ImageTexture {{
                              url [
                                "{(texture_path / 'wheel.jpg')}"
                              ]
                            }}
                            textureTransform USE BLENDER_TEX_TF
                            material Material {{ }}
                          }}
                        }}
                      ]
                      scale {physical['front_wheel_radius']} {physical['front_wheel_width']} {physical['front_wheel_radius']}
                    }}
                  ]
                  physics DEF FRONT_WHEEL_PHYSICS Physics {{
                    density -1
                    mass    {physical['front_wheel_mass']}
                    centerOfMass [
                      {vec2str(physical['front_wheel_com'])}
                    ]
                    inertiaMatrix [
                      {dict2str(physical['front_wheel_inertial'], 'xx', 'yy', 'zz')}
                      {dict2str(physical['front_wheel_inertial'], 'xy', 'xy', 'yz')}
                    ]
                  }}
                  boundingObject DEF FRONT_WHEEL_BND_OBJ Cylinder {{
                    radius      {physical['front_wheel_radius']}
                    height      {physical['front_wheel_width']}
                    subdivision 24
                  }}
                  name "front_left_wheel"
                }}
                jointParameters HingeJointParameters {{
                  axis 0.0 0.0 1.0
                }}
                jointParameters2 JointParameters {{
                  axis 0.0 1.0 0.0
                }}
                device [
                  RotationalMotor {{
                    name        "front_left_steering_motor"
                    minPosition {-physical['max_steering_angle']}
                    maxPosition {physical['max_steering_angle']}
                    maxTorque   {physical['max_steering_torque']}
                    sound       ""
                  }}
                ]
              }}
            ]
            translation {physical['wheelbase'] / 2.0} {physical['front_track'] / 2.0} 0.0
          }}
          Transform {{
            children [
              Hinge2Joint {{
                endPoint Solid {{
                  children [
                    Transform {{
                      children [
                        Shape {{
                          geometry USE WHEEL_MESH
                          appearance USE WHEEL_APPEARANCE
                        }}
                      ]
                      rotation 0.0 0.0 1.0 {pi}
                      scale    {physical['front_wheel_radius']} {physical['front_wheel_width']} {physical['front_wheel_radius']}
                    }}
                  ]
                  physics USE FRONT_WHEEL_PHYSICS
                  boundingObject USE FRONT_WHEEL_BND_OBJ
                  name "front_right_wheel"
                }}
                jointParameters HingeJointParameters {{
                  axis 0.0 0.0 1.0
                }}
                jointParameters2 JointParameters {{
                  axis 0.0 1.0 0.0
                }}
                device [
                  RotationalMotor {{
                    name        "front_right_steering_motor"
                    minPosition {-physical['max_steering_angle']}
                    maxPosition {physical['max_steering_angle']}
                    maxTorque   {physical['max_steering_torque']}
                    sound       ""
                  }}
                ]
              }}
            ]
            translation {physical['wheelbase'] / 2.0} {-physical['front_track'] / 2.0} 0.0
          }}
          Transform {{
            children [
              HingeJoint {{
                endPoint Solid {{
                  children [
                    Transform {{
                      children [
                        Shape {{
                          geometry USE WHEEL_MESH
                          appearance USE WHEEL_APPEARANCE
                        }}
                      ]
                      scale    {physical['rear_wheel_radius']} {physical['rear_wheel_width']} {physical['rear_wheel_radius']}
                    }}
                  ]
                  physics DEF REAR_WHEEL_PHYSICS Physics {{
                    density -1
                    mass    {physical['rear_wheel_mass']}
                    centerOfMass [
                      {vec2str(physical['rear_wheel_com'])}
                    ]
                    inertiaMatrix [
                      {dict2str(physical['rear_wheel_inertial'], 'xx', 'yy', 'zz')}
                      {dict2str(physical['rear_wheel_inertial'], 'xy', 'xy', 'yz')}
                    ]
                  }}
                  boundingObject DEF REAR_WHEEL_BND_OBJ Cylinder {{
                    radius      {physical['rear_wheel_radius']}
                    height      {physical['rear_wheel_width']}
                    subdivision 24
                  }}
                  name "rear_left_wheel"
                }}
                jointParameters HingeJointParameters {{
                  axis 0.0 0.0 1.0
                }}
                device [
                  RotationalMotor {{
                    name        "rear_left_steering_motor"
                    minPosition {-physical['max_steering_angle']}
                    maxPosition {physical['max_steering_angle']}
                    maxTorque   {physical['max_steering_torque']}
                    sound       ""
                  }}
                ]
              }}
            ]
            translation {-physical['wheelbase'] / 2.0} {physical['rear_track'] / 2.0} 0.0
          }}
          Transform {{
            children [
              HingeJoint {{
                endPoint Solid {{
                  children [
                    Transform {{
                      children [
                        Shape {{
                          geometry USE WHEEL_MESH
                          appearance USE WHEEL_APPEARANCE
                        }}
                      ]
                      rotation 0.0 0.0 1.0 {pi}
                      scale    {physical['rear_wheel_radius']} {physical['rear_wheel_width']} {physical['rear_wheel_radius']}
                    }}
                  ]
                  physics USE REAR_WHEEL_PHYSICS
                  boundingObject USE REAR_WHEEL_BND_OBJ
                  name "rear_right_wheel"
                }}
                jointParameters HingeJointParameters {{
                  axis 0.0 0.0 1.0
                }}
                device [
                  RotationalMotor {{
                    name        "rear_right_steering_motor"
                    minPosition {-physical['max_steering_angle']}
                    maxPosition {physical['max_steering_angle']}
                    maxTorque   {physical['max_steering_torque']}
                    sound       ""
                  }}
                ]
              }}
            ]
            translation {-physical['wheelbase'] / 2.0} {-physical['rear_track'] / 2.0} 0.0
          }}
        ]
        physics Physics {{
          centerOfMass [
            {vec2str(physical['chassis_com'])}
          ]
          inertiaMatrix [
            {dict2str(physical['chassis_intertial'], 'xx', 'yy', 'zz')}
            {dict2str(physical['chassis_intertial'], 'xy', 'xy', 'yz')}
          ]
          density -1
          mass    {physical['chassis_mass'] - robot_mass}
        }}
        boundingObject Transform {{
          children [
            Box {{
              size {physical['chassis_length']} {physical['chassis_width']} {physical['chassis_height']}
            }}
          ]
          translation {physical['front_overhang'] - (physical['chassis_length'] - physical['wheelbase']) * 0.5} 0 {physical['chassis_height'] * 0.5}
        }}
        translation 0.0 0.0 {(physical['rear_wheel_radius'] + physical['front_wheel_radius']) * 0.5}
        rotation    0.0 1.0 0.0 {atan2(physical['rear_wheel_radius'] - physical['front_wheel_radius'], physical['wheelbase'])}
      }}
    ]

    # Dummy physics property. The robot solid is rigedly fixed to the chassis
    # solid so in the simulation they will still only be viewed as one object.
    # In order for the robot to have a mobile base thoght the physics field of
    # the robot node needs to be specified. We could use a small dummy mass
    # like how we use a sphere with tiny radius as boundingObject below,
    # however webots warns agaist this in console as the simulation could in
    # theory become unstable with large mass differences between nodes.
    # However in this case that is not relevant since the solids are joined
    # into one in the simulation layer anyways. To stop warnings beeing printed
    # to the webots console, we split the mass between the robot node and the
    # chassis node
    physics Physics {{
      density -1
      mass    {robot_mass}
    }}

    # Dummy bounding object, a bounding object is needed to set the physics
    # property but we are only really interested in the boundingObjects of
    # chassis and wheels for example and the base robot node does in this case
    # not correspond to any physical part with mass and bounds
    boundingObject Sphere {{
      radius 0.001
    }}

    synchronization FALSE
    name            "Autonomous Twizy"
    model           "twizy"
    translation     IS translation
    rotation        IS rotation
    controller      IS controller
    controllerArgs  IS controllerArgs
  }}
}}
""")
