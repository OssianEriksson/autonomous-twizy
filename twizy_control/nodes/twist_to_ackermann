#!/usr/bin/python3

import rospy
from ackermann_msgs.msg import AckermannDriveStamped
from geometry_msgs.msg import Twist
from std_msgs.msg import Bool

def main():
    object_in_the_way_front = False
    object_in_the_way_rear = False
    # Initialize ROS node
    rospy.init_node('twist_to_ackermann')

    # Read parameters from ROS parameter server
    max_steering_angle = rospy.get_param('~max_steering_angle')
    frame_id = rospy.get_param('~frame_id', 'odom')

    pub = rospy.Publisher('ackermann_cmd', AckermannDriveStamped, queue_size=1)

    def cmd_callback(data):
        msg = AckermannDriveStamped()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = frame_id
        # The cmd_angle_instead_rotvel parameter of teb_local_planner modifies
        # the Twist message on the cmd_vel topic to contain absolute steering
        # angle in its angular component instead of angular velocity
        msg.drive.steering_angle = min(
            max(data.angular.z, -max_steering_angle), max_steering_angle)
        
        if object_in_the_way_front and data.linear.x > 0.0 or object_in_the_way_rear and data.linear.x < 0.0:
            msg.drive.speed = 0.0
        else :     
            msg.drive.speed = data.linear.x

        pub.publish(msg)

    def stop_indicator_front(value) :
        global object_in_the_way_front 
        object_in_the_way_front = value
    
    def stop_indicator_rear(value) :
        global object_in_the_way_rear 
        object_in_the_way_rear = value



    rospy.Subscriber('cmd_vel', Twist, cmd_callback, queue_size=1)
    rospy.Subscriber('object_detection_front', Bool, stop_indicator_front)
    rospy.Subscriber('object_detection_rear', Bool, stop_indicator_rear)
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


if __name__ == '__main__':
    main()
