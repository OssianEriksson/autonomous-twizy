#!/usr/bin/env python3

import rospy
import cv2 as cv
import message_filters
from std_msgs.msg import String, Bool, Int16
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from yolo_detection.msg import BoundingBoxes, BoundingBox
from math import floor, ceil

# Use cv_bridge() to convert the ROS image to OpenCV format
bridge = CvBridge()
times = 0
stopsign_count = 0
stopsign_dist = 0


def main():
    # Initialize ROS node
    rospy.init_node('object_avoidance', anonymous=True)

    pub = rospy.Publisher('object_detection', Bool, queue_size=1)
    # test = rospy.Publisher('avrage_dist', Int16, queue_size=1)

    def convert_image(ros_image, boxes):
        """
        Callback function
        """

        global stopsign_count
        global stopsign_dist
        try:
            # Convert the image using the default passthrough encoding
            cv_image = bridge.imgmsg_to_cv2(
                ros_image, desired_encoding='passthrough')

            # Create an bool to be sent if the car identifies an object
            msg_to_publish = False
            average = 0
            # Loops over every box and calculates the average distance to each
            # object by adding the distance to every pixel. When we don't find
            # any object the camera returns ymax as -106 there for we check
            # before going inside the second loop.
            for box in boxes.bounding_boxes:
                if box.ymax > -1:
                    quarterY = (box.ymax - box.ymin)/4
                    quarterX = (box.xmax - box.xmin)/4
                    xmin = int(floor(box.xmin + quarterX)-1)
                    xmax = int(ceil(box.xmax - quarterX))
                    ymin = int(floor(box.ymin + quarterY)-1)
                    ymax = int(ceil(box.ymax - quarterY))

                    average = cv_image[ymin:ymax, xmin:xmax].mean()
                    # for i in range(xmin, xmax):
                    #     for j in range(ymin, ymax):
                    #         average += cv_image[j][i]
                    average = int(average / ((xmax - xmin) * (ymax - ymin)))
                    # print(average,ymin,ymax,xmin,xmax)

                    if (box.Class in ['person', 'dog', 'cat', 'horse'] and
                            average <= 4200):
                        msg_to_publish = True
                        pub.publish(msg_to_publish)
                        rospy.sleep(5)
                    elif box.Class == 'stop sign' and average <= 5000:
                        if(average > stopsign_dist):
                            stopsign_dist = average
                        if (stopsign_count < 2 or stopsign_dist < average):
                            stopsign_count += 1
                            msg_to_publish = True
                            pub.publish(msg_to_publish)
                            rospy.sleep(5)
                        else:
                            stopsign_dist = 0

            # if average > 0 :
            #     test.publish(average)
            pub.publish(msg_to_publish)

        except CvBridgeError as e:  # Error handling for CV
            print(e)

    # Subscribe to the image given from the realsense camera and the bounding
    # boxes given from YOLO. Then aligne the messages so you get the right
    # boxes to the right image.
    aligned_camera = message_filters.Subscriber(
        '/camera/aligned_depth_to_color/image_raw', Image, buff_size=10)
    boundingboxes = message_filters.Subscriber(
        'boxes', BoundingBoxes, buff_size=10)
    ts = message_filters.TimeSynchronizer([aligned_camera, boundingboxes], 10)
    ts.registerCallback(convert_image)

    try:
        rospy.spin()
    except rospy.ROSInternalException:
        pass


if __name__ == '__main__':
    main()
