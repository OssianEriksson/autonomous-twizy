# =============================================================================
# | This document was autogenerated by python from                            |
# | /home/ossian/autonomous-twizy/src/ackermann_ekf/tools/ekf_functions.py    |
# | EDITING THIS FILE BY HAND IS NOT RECOMMENDED                              |
# =============================================================================

from numpy import array
from math import *

def f(_Dummy_715, dt):
    [X, Y, Z, v, a, ROLL, PITCH, YAW, droll_dx, dpitch_dx, dyaw_dx] = _Dummy_715
    return ([X + (1/2)*dt**2*(a*cos(PITCH)*cos(YAW) - dpitch_dx*v**2*sin(PITCH)*cos(ROLL)*cos(YAW) - dpitch_dx*v**2*sin(ROLL)*sin(YAW) + dyaw_dx*v**2*sin(PITCH)*sin(ROLL)*cos(YAW) - dyaw_dx*v**2*sin(YAW)*cos(ROLL)) + dt*v*cos(PITCH)*cos(YAW), Y + (1/2)*dt**2*(a*sin(YAW)*cos(PITCH) - dpitch_dx*v**2*sin(PITCH)*sin(YAW)*cos(ROLL) + dpitch_dx*v**2*sin(ROLL)*cos(YAW) + dyaw_dx*v**2*sin(PITCH)*sin(ROLL)*sin(YAW) + dyaw_dx*v**2*cos(ROLL)*cos(YAW)) + dt*v*sin(YAW)*cos(PITCH), Z + (1/2)*dt**2*(-a*sin(PITCH) - dpitch_dx*v**2*cos(PITCH)*cos(ROLL) + dyaw_dx*v**2*sin(ROLL)*cos(PITCH)) - dt*v*sin(PITCH), a*dt + v, a, dpitch_dx*dt*v*sin(ROLL)*tan(PITCH) + droll_dx*dt*v + dt*dyaw_dx*v*cos(ROLL)*tan(PITCH) + atan2(sin(ROLL)*cos(PITCH), cos(PITCH)*cos(ROLL)), (dt*v*(dpitch_dx*cos(ROLL) - dyaw_dx*sin(ROLL))*cos(PITCH) + sqrt(cos(PITCH)**2)*asin(sin(PITCH)))/sqrt(cos(PITCH)**2), (dpitch_dx*dt*v*sin(ROLL) + dt*dyaw_dx*v*cos(ROLL) + cos(PITCH)*atan2(sin(YAW)*cos(PITCH), cos(PITCH)*cos(YAW)))/cos(PITCH), droll_dx, dpitch_dx, dyaw_dx])


def F(_Dummy_716, dt):
    [X, Y, Z, v, a, ROLL, PITCH, YAW, droll_dx, dpitch_dx, dyaw_dx] = _Dummy_716
    return ([[1, 0, 0, dt*(dt*v*(-dpitch_dx*sin(PITCH)*cos(ROLL)*cos(YAW) - dpitch_dx*sin(ROLL)*sin(YAW) + dyaw_dx*sin(PITCH)*sin(ROLL)*cos(YAW) - dyaw_dx*sin(YAW)*cos(ROLL)) + cos(PITCH)*cos(YAW)), (1/2)*dt**2*cos(PITCH)*cos(YAW), (1/2)*dt**2*v**2*(dpitch_dx*sin(PITCH)*sin(ROLL)*cos(YAW) - dpitch_dx*sin(YAW)*cos(ROLL) + dyaw_dx*sin(PITCH)*cos(ROLL)*cos(YAW) + dyaw_dx*sin(ROLL)*sin(YAW)), (1/2)*dt*(dt*(-a*sin(PITCH) - dpitch_dx*v**2*cos(PITCH)*cos(ROLL) + dyaw_dx*v**2*sin(ROLL)*cos(PITCH)) - 2*v*sin(PITCH))*cos(YAW), (1/2)*dt*(dt*(-a*sin(YAW)*cos(PITCH) + dpitch_dx*v**2*sin(PITCH)*sin(YAW)*cos(ROLL) - dpitch_dx*v**2*sin(ROLL)*cos(YAW) - dyaw_dx*v**2*sin(PITCH)*sin(ROLL)*sin(YAW) - dyaw_dx*v**2*cos(ROLL)*cos(YAW)) - 2*v*sin(YAW)*cos(PITCH)), 0, -1/2*dt**2*v**2*(sin(PITCH)*cos(ROLL)*cos(YAW) + sin(ROLL)*sin(YAW)), (1/2)*dt**2*v**2*(sin(PITCH)*sin(ROLL)*cos(YAW) - sin(YAW)*cos(ROLL))], [0, 1, 0, dt*(dt*v*(-dpitch_dx*sin(PITCH)*sin(YAW)*cos(ROLL) + dpitch_dx*sin(ROLL)*cos(YAW) + dyaw_dx*sin(PITCH)*sin(ROLL)*sin(YAW) + dyaw_dx*cos(ROLL)*cos(YAW)) + sin(YAW)*cos(PITCH)), (1/2)*dt**2*sin(YAW)*cos(PITCH), (1/2)*dt**2*v**2*(dpitch_dx*sin(PITCH)*sin(ROLL)*sin(YAW) + dpitch_dx*cos(ROLL)*cos(YAW) + dyaw_dx*sin(PITCH)*sin(YAW)*cos(ROLL) - dyaw_dx*sin(ROLL)*cos(YAW)), (1/2)*dt*(dt*(-a*sin(PITCH) - dpitch_dx*v**2*cos(PITCH)*cos(ROLL) + dyaw_dx*v**2*sin(ROLL)*cos(PITCH)) - 2*v*sin(PITCH))*sin(YAW), (1/2)*dt*(dt*(a*cos(PITCH)*cos(YAW) - dpitch_dx*v**2*sin(PITCH)*cos(ROLL)*cos(YAW) - dpitch_dx*v**2*sin(ROLL)*sin(YAW) + dyaw_dx*v**2*sin(PITCH)*sin(ROLL)*cos(YAW) - dyaw_dx*v**2*sin(YAW)*cos(ROLL)) + 2*v*cos(PITCH)*cos(YAW)), 0, (1/2)*dt**2*v**2*(-sin(PITCH)*sin(YAW)*cos(ROLL) + sin(ROLL)*cos(YAW)), (1/2)*dt**2*v**2*(sin(PITCH)*sin(ROLL)*sin(YAW) + cos(ROLL)*cos(YAW))], [0, 0, 1, dt*(dt*v*(-dpitch_dx*cos(ROLL) + dyaw_dx*sin(ROLL))*cos(PITCH) - sin(PITCH)), -1/2*dt**2*sin(PITCH), (1/2)*dt**2*v**2*(dpitch_dx*sin(ROLL) + dyaw_dx*cos(ROLL))*cos(PITCH), (1/2)*dt*(dt*(-a*cos(PITCH) + dpitch_dx*v**2*sin(PITCH)*cos(ROLL) - dyaw_dx*v**2*sin(PITCH)*sin(ROLL)) - 2*v*cos(PITCH)), 0, 0, -1/2*dt**2*v**2*cos(PITCH)*cos(ROLL), (1/2)*dt**2*v**2*sin(ROLL)*cos(PITCH)], [0, 0, 0, 1, dt, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, dt*(dpitch_dx*sin(ROLL)*tan(PITCH) + droll_dx + dyaw_dx*cos(ROLL)*tan(PITCH)), 0, dpitch_dx*dt*v*cos(ROLL)*tan(PITCH) - dt*dyaw_dx*v*sin(ROLL)*tan(PITCH) + 1, dt*v*(dpitch_dx*sin(ROLL) + dyaw_dx*cos(ROLL))/cos(PITCH)**2, 0, dt*v, dt*v*sin(ROLL)*tan(PITCH), dt*v*cos(ROLL)*tan(PITCH)], [0, 0, 0, dt*(dpitch_dx*cos(ROLL) - dyaw_dx*sin(ROLL))*cos(PITCH)/sqrt(cos(PITCH)**2), 0, -dt*v*(dpitch_dx*sin(ROLL) + dyaw_dx*cos(ROLL))*cos(PITCH)/sqrt(cos(PITCH)**2), cos(PITCH)/sqrt(cos(PITCH)**2), 0, 0, dt*v*cos(PITCH)*cos(ROLL)/sqrt(cos(PITCH)**2), -dt*v*sin(ROLL)*cos(PITCH)/sqrt(cos(PITCH)**2)], [0, 0, 0, dt*(dpitch_dx*sin(ROLL) + dyaw_dx*cos(ROLL))/cos(PITCH), 0, dt*v*(dpitch_dx*cos(ROLL) - dyaw_dx*sin(ROLL))/cos(PITCH), dt*v*(dpitch_dx*sin(ROLL) + dyaw_dx*cos(ROLL))*sin(PITCH)/cos(PITCH)**2, 1, 0, dt*v*sin(ROLL)/cos(PITCH), dt*v*cos(ROLL)/cos(PITCH)], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])


def h(_Dummy_717, _Dummy_718):
    [X, Y, Z, v, a, ROLL, PITCH, YAW, droll_dx, dpitch_dx, dyaw_dx] = _Dummy_717
    [sensor_x, sensor_y, sensor_z] = _Dummy_718
    return ([X + sensor_x*cos(PITCH)*cos(YAW) + sensor_y*(sin(PITCH)*sin(ROLL)*cos(YAW) - sin(YAW)*cos(ROLL)) + sensor_z*(sin(PITCH)*cos(ROLL)*cos(YAW) + sin(ROLL)*sin(YAW)), Y + sensor_x*sin(YAW)*cos(PITCH) + sensor_y*(sin(PITCH)*sin(ROLL)*sin(YAW) + cos(ROLL)*cos(YAW)) + sensor_z*(sin(PITCH)*sin(YAW)*cos(ROLL) - sin(ROLL)*cos(YAW)), Z - sensor_x*sin(PITCH) + sensor_y*sin(ROLL)*cos(PITCH) + sensor_z*cos(PITCH)*cos(ROLL), v*(dpitch_dx*sensor_z - dyaw_dx*sensor_y + 1), v*(-droll_dx*sensor_z + dyaw_dx*sensor_x), v*(-dpitch_dx*sensor_x + droll_dx*sensor_y), a*dpitch_dx*sensor_z - a*dyaw_dx*sensor_y + a - dpitch_dx*v**2*(dpitch_dx*sensor_x - droll_dx*sensor_y) + dyaw_dx*v**2*(droll_dx*sensor_z - dyaw_dx*sensor_x), -a*droll_dx*sensor_z + a*dyaw_dx*sensor_x + droll_dx*v**2*(dpitch_dx*sensor_x - droll_dx*sensor_y) + dyaw_dx*v**2*(dpitch_dx*sensor_z - dyaw_dx*sensor_y) + 2*dyaw_dx*v**2, -a*dpitch_dx*sensor_x + a*droll_dx*sensor_y - dpitch_dx*v**2*(dpitch_dx*sensor_z - dyaw_dx*sensor_y) - 2*dpitch_dx*v**2 - droll_dx*v**2*(droll_dx*sensor_z - dyaw_dx*sensor_x), ROLL, PITCH, YAW, droll_dx*v, dpitch_dx*v, dyaw_dx*v])


def H(_Dummy_719, _Dummy_720):
    [X, Y, Z, v, a, ROLL, PITCH, YAW, droll_dx, dpitch_dx, dyaw_dx] = _Dummy_719
    [sensor_x, sensor_y, sensor_z] = _Dummy_720
    return ([[1, 0, 0, 0, 0, sensor_y*(sin(PITCH)*cos(ROLL)*cos(YAW) + sin(ROLL)*sin(YAW)) - sensor_z*(sin(PITCH)*sin(ROLL)*cos(YAW) - sin(YAW)*cos(ROLL)), (-sensor_x*sin(PITCH) + sensor_y*sin(ROLL)*cos(PITCH) + sensor_z*cos(PITCH)*cos(ROLL))*cos(YAW), -sensor_x*sin(YAW)*cos(PITCH) - sensor_y*(sin(PITCH)*sin(ROLL)*sin(YAW) + cos(ROLL)*cos(YAW)) - sensor_z*(sin(PITCH)*sin(YAW)*cos(ROLL) - sin(ROLL)*cos(YAW)), 0, 0, 0], [0, 1, 0, 0, 0, sensor_y*(sin(PITCH)*sin(YAW)*cos(ROLL) - sin(ROLL)*cos(YAW)) - sensor_z*(sin(PITCH)*sin(ROLL)*sin(YAW) + cos(ROLL)*cos(YAW)), (-sensor_x*sin(PITCH) + sensor_y*sin(ROLL)*cos(PITCH) + sensor_z*cos(PITCH)*cos(ROLL))*sin(YAW), sensor_x*cos(PITCH)*cos(YAW) + sensor_y*(sin(PITCH)*sin(ROLL)*cos(YAW) - sin(YAW)*cos(ROLL)) + sensor_z*(sin(PITCH)*cos(ROLL)*cos(YAW) + sin(ROLL)*sin(YAW)), 0, 0, 0], [0, 0, 1, 0, 0, (sensor_y*cos(ROLL) - sensor_z*sin(ROLL))*cos(PITCH), -sensor_x*cos(PITCH) - sensor_y*sin(PITCH)*sin(ROLL) - sensor_z*sin(PITCH)*cos(ROLL), 0, 0, 0, 0], [0, 0, 0, dpitch_dx*sensor_z - dyaw_dx*sensor_y + 1, 0, 0, 0, 0, 0, sensor_z*v, -sensor_y*v], [0, 0, 0, -droll_dx*sensor_z + dyaw_dx*sensor_x, 0, 0, 0, 0, -sensor_z*v, 0, sensor_x*v], [0, 0, 0, -dpitch_dx*sensor_x + droll_dx*sensor_y, 0, 0, 0, 0, sensor_y*v, -sensor_x*v, 0], [0, 0, 0, 2*v*(-dpitch_dx*(dpitch_dx*sensor_x - droll_dx*sensor_y) + dyaw_dx*(droll_dx*sensor_z - dyaw_dx*sensor_x)), dpitch_dx*sensor_z - dyaw_dx*sensor_y + 1, 0, 0, 0, v**2*(dpitch_dx*sensor_y + dyaw_dx*sensor_z), a*sensor_z - 2*dpitch_dx*sensor_x*v**2 + droll_dx*sensor_y*v**2, -a*sensor_y + droll_dx*sensor_z*v**2 - 2*dyaw_dx*sensor_x*v**2], [0, 0, 0, 2*v*(droll_dx*(dpitch_dx*sensor_x - droll_dx*sensor_y) + dyaw_dx*(dpitch_dx*sensor_z - dyaw_dx*sensor_y) + 2*dyaw_dx), -droll_dx*sensor_z + dyaw_dx*sensor_x, 0, 0, 0, -a*sensor_z + dpitch_dx*sensor_x*v**2 - 2*droll_dx*sensor_y*v**2, v**2*(droll_dx*sensor_x + dyaw_dx*sensor_z), a*sensor_x + dpitch_dx*sensor_z*v**2 - 2*dyaw_dx*sensor_y*v**2 + 2*v**2], [0, 0, 0, -2*v*(dpitch_dx*(dpitch_dx*sensor_z - dyaw_dx*sensor_y) + 2*dpitch_dx + droll_dx*(droll_dx*sensor_z - dyaw_dx*sensor_x)), -dpitch_dx*sensor_x + droll_dx*sensor_y, 0, 0, 0, a*sensor_y - 2*droll_dx*sensor_z*v**2 + dyaw_dx*sensor_x*v**2, -a*sensor_x - 2*dpitch_dx*sensor_z*v**2 + dyaw_dx*sensor_y*v**2 - 2*v**2, v**2*(dpitch_dx*sensor_y + droll_dx*sensor_x)], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, droll_dx, 0, 0, 0, 0, v, 0, 0], [0, 0, 0, dpitch_dx, 0, 0, 0, 0, 0, v, 0], [0, 0, 0, dyaw_dx, 0, 0, 0, 0, 0, 0, v]])