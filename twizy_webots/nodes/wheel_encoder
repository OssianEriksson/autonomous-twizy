#!/usr/bin/python3

import rospy

import twizy_webots.robot

from nav_msgs.msg import Odometry
from webots_ros.msg import Float64Stamped


class WheelEncoder:
    def __init__(self, device, frame_id, wheel_radius, position_covariance,
                 sub_topic, pub_topic):
        self.last_msg = None

        # Create publisher
        pub = rospy.Publisher(pub_topic, Odometry, queue_size=1)

        odom = Odometry()
        odom.child_frame_id = frame_id
        odom.twist.covariance = [0.0] * 36

        def cb(msg):
            if self.last_msg is not None:
                odom.header.stamp = msg.header.stamp

                dt = self.last_msg.header.stamp.to_sec() - \
                    msg.header.stamp.to_sec()
                odom.twist.twist.linear.x = abs(wheel_radius * (
                    msg.data - self.last_msg.data) / dt)
                odom.twist.covariance[0] = 2 * position_covariance / dt**2

                pub.publish(odom)

            self.last_msg = msg

        # Subscribe to messages published by webots ROS controller
        rospy.Subscriber(sub_topic, Float64Stamped, callback=cb, queue_size=1)


def main():
    # Initialize ROS node. There might be multiple versions of this node
    # running at once with the same name, anonymous=True allows this
    rospy.init_node('wheel_encoder', anonymous=True)

    # Read parameters from ROS parameter server
    device = rospy.get_param('~device')
    frame_id = rospy.get_param('~frame_id', device)
    ups = rospy.get_param('~ups', 30.0)
    wheel_radius = rospy.get_param('~wheel_radius')
    position_covariance = rospy.get_param('~position_covariance')
    model = rospy.get_param('twizy_webots/model_name', None)

    robot = twizy_webots.robot.Robot(model)

    # Tell the webots ROS controller to publish wheel encoder data
    if not robot.call_enable(device, ups):
        rospy.logfatal(f'Unable to enable device {device}')
        return

    WheelEncoder(device, frame_id, wheel_radius, position_covariance,
                 robot.topic_name(f'{device}/value'), 'wheel/odom')

    # Wait for shutdown
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


if __name__ == '__main__':
    main()
